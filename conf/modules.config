/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'GATHERPILEUPSUMMARIES' {
        ext.prefix       = { "${meta.id}.mutect2" }
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('gatk_contamination')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/gatk4/mutect2/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATHERPILEUPSUMMARIES_.*' {
        ext.prefix       = { "${meta.id}.mutect2" }
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('gatk_contamination')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/gatk4/mutect2/${meta.tumour_id}_vs_${meta.normal_id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GETPILEUPSUMMARIES.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('gatk_contamination')) }
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/gatk4/" },
            pattern: "*.table",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.id}/${it}" }
        ]
    }

    withName: 'GETPILEUPSUMMARIES_.*' {
        ext.prefix        = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('gatk_contamination')) }
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/gatk4/" },
            pattern: "*.table",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.tumour_id}_vs_${meta.normal_id}/${it}" }
        ]
    }

    withName: 'CALCULATECONTAMINATION' {
        ext.prefix       = { "${meta.id}.mutect2" }
        ext.args         = { "-tumor-segmentation ${meta.id}.mutect2.segmentation.table" }
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('gatk_contamination')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/gatk4/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "mutect2/${meta.id}/${filename}" }
        ]
    }

    withName: 'MOSDEPTH' {
        ext.args = { !params.target ? "--fast-mode --no-per-base --mapq 20" : ""}
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/mosdepth/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'PICARD_COLLECTHSMETRICS' {
        ext.args = { "--VALIDATION_STRINGENCY LENIENT"}
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('collect_hs_metrics')) }
    }

    withName: 'PICARD_COLLECTWGSMETRICS' {
        ext.args = { "--VALIDATION_STRINGENCY LENIENT"}
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('collect_wgs_metrics')) }
    }

    withName: 'PICARD_COLLECTOXOGMETRICS' {
        ext.args = { "--VALIDATION_STRINGENCY LENIENT"}
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('oxog')) }
    }

    withName: 'VERIFYBAMID_VERIFYBAMID2' {
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('verifybamid2')) }
    }

    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'SAMTOOLS_STATS' {
        ext.when = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools_stats')) }
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        ext.prefix       = {"${meta.id}"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed.gz"
        ]
    }

}
